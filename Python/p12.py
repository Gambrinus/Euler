#!/usr/bin/env python

""" Project Euler - Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

__author__ = "Daniel J. Barnes"
__email__ = "ghen2000@gmail.com"
__status__ = "Working"

import time
import operator

def print_to_clipboard(string):
	from Tkinter import Tk
	r = Tk()
	r.withdraw()
	r.clipboard_clear()
	r.clipboard_append(string)
	r.destroy()

# From: http://stackoverflow.com/questions/110344/algorithm-to-
# calculate-the-number-of-divisors-of-a-given-number
# User: Tyler
# A slightly efficient superset of primes.
def PrimesPlus():
  yield 2
  yield 3
  i = 5
  while True:
    yield i
    if i % 6 == 1:
      i += 2
    i += 2

# Returns a dict d with n = product p ^ d[p]
def GetPrimeDecomp(n):
  d = {}
  primes = PrimesPlus()
  for p in primes:
    while n % p == 0:
      n /= p
      d[p] = d.setdefault(p, 0) + 1
    if n == 1:
      return d

def NumberOfDivisors(n):
  d = GetPrimeDecomp(n)
  powers_plus = map(lambda x: x+1, d.values())
  return reduce(operator.mul, powers_plus, 1)

def memoize(gen_triangle_num):
   cache = {}
   def memoizedFunction(*args):
      if args not in cache:
         cache[args] = gen_triangle_num(*args)
      return cache[args]
   memoizedFunction.cache = cache
   return memoizedFunction

@memoize
def gen_triangle_num(n):
	if n <= 1:
		return n
	else:
		return n + gen_triangle_num(n-1)

beg = time.time()

x = 0
i = 1
while x < 500:
	tri = gen_triangle_num(i)
	x = NumberOfDivisors(tri)
	print i,tri,x
	i += 1 

out = tri
print out,time.time()-beg
print_to_clipboard(str(out))